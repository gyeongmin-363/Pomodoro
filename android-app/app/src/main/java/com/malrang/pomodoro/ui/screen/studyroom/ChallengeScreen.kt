package com.malrang.pomodoro.ui.screen.studyroom

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Tab
import androidx.compose.material3.TabRow
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.malrang.pomodoro.dataclass.animalInfo.Animal
import com.malrang.pomodoro.networkRepo.User
import com.malrang.pomodoro.ui.screen.studyroom.dialog.CreateStudyRoomDialog
import com.malrang.pomodoro.ui.screen.studyroom.dialog.JoinStudyRoomDialog
import com.malrang.pomodoro.ui.theme.SetBackgroundImage
import com.malrang.pomodoro.viewmodel.AuthViewModel
import com.malrang.pomodoro.viewmodel.StudyRoomViewModel
import kotlinx.serialization.json.jsonPrimitive

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ChallengeScreen(
    collectAnimal : Set<Animal>,
    authVM: AuthViewModel,
    roomVM: StudyRoomViewModel,
    inviteStudyRoomId: String?,
    onNavigateBack: () -> Unit,
    onNavigateToDelete: () -> Unit
) {
    val authState by authVM.uiState.collectAsState()

    LaunchedEffect(authState) {
        when (val state = authState) {
            is AuthViewModel.AuthState.Authenticated -> {
                state.user?.let { userInfo ->
                    val userName = userInfo.userMetadata?.get("name")?.jsonPrimitive?.content ?: "ÏÇ¨Ïö©Ïûê"
                    val appUser = User(id = userInfo.id, name = userName)
                    roomVM.onUserAuthenticated(appUser)
                }
            }
            is AuthViewModel.AuthState.NotAuthenticated -> {
                roomVM.onUserNotAuthenticated()
            }
            else -> { /* Î°úÎî©, ÏóêÎü¨ Îì± */ }
        }
    }

    LaunchedEffect(inviteStudyRoomId) {
        inviteStudyRoomId?.let {
            roomVM.handleInviteLink(it)
        }
    }

    val uiState by roomVM.studyRoomUiState.collectAsState()
    val currentUser = uiState.currentUser
    val createdRooms = uiState.createdStudyRooms
    val joinedRooms = uiState.joinedStudyRooms
    val isLoading = uiState.isLoading

    // ‚úÖ [Ï∂îÍ∞Ä] ÌÉ≠ ÏÉÅÌÉú Í¥ÄÎ¶¨Î•º ÏúÑÌïú Î≥ÄÏàò
    var selectedTabIndex by remember { mutableIntStateOf(0) }
    val tabs = listOf("ÎÇ¥ Ï±åÎ¶∞ÏßÄÎ£∏", "Ï∞∏Ïó¨ Ï±åÎ¶∞ÏßÄÎ£∏")

    // ‚ú® Í≤ÄÏÉâ Í∏∞Îä•: Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•ÏùÑ ÏúÑÌïú ÏÉÅÌÉú Î≥ÄÏàò
    var searchQuery by remember { mutableStateOf("") }
    // ‚ú® Í≤ÄÏÉâ Í∏∞Îä•: Í≤ÄÏÉâ UI ÌôúÏÑ±Ìôî ÏÉÅÌÉúÎ•º ÏúÑÌïú Î≥ÄÏàò
    var isSearchActive by remember { mutableStateOf(false) }


    // FloatingActionButtonÏùÄ ScaffoldÏôÄ Ìï®Íªò ÏÇ¨Ïö©ÌïòÎäî Í≤ÉÏù¥ ÏùºÎ∞òÏ†ÅÏù¥ÏßÄÎßå,
    // ÌòÑÏû¨ Íµ¨Ï°∞Î•º Ïú†ÏßÄÌïòÍ∏∞ ÏúÑÌï¥ BoxÎ°ú Í∞êÏã∏ ÌôîÎ©¥ ÏúÑÏóê ÌëúÏãúÎêòÎèÑÎ°ù Ìï©ÎãàÎã§.
    Box(modifier = Modifier.fillMaxSize()) {
        SetBackgroundImage()

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(top = 16.dp)
            // ‚ùå [Ï†úÍ±∞] Ï§ëÏ≤© Ïä§ÌÅ¨Î°§ÏùÑ Ïú†Î∞úÌïòÎäî ÏõêÏù∏Ïù¥ÎØÄÎ°ú Ï†úÍ±∞Ìï©ÎãàÎã§.
            // .verticalScroll(rememberScrollState())
        ){
            // ‚ú® Í≤ÄÏÉâ Í∏∞Îä•: ÏÉÅÎã® Î∞î UIÎ•º isSearchActive ÏÉÅÌÉúÏóê Îî∞Îùº ÎèôÏ†ÅÏúºÎ°ú Î≥ÄÍ≤Ω
            Row(
                Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                if (isSearchActive) {
                    // ‚ú® Í≤ÄÏÉâ ÌôúÏÑ±Ìôî ÏÉÅÌÉú UI: Í≤ÄÏÉâÏ∞Ω ÌëúÏãú
                    OutlinedTextField(
                        value = searchQuery,
                        onValueChange = { searchQuery = it },
                        modifier = Modifier.weight(1f),
                        placeholder = { Text("Ï±åÎ¶∞ÏßÄÎ£∏ Ïù¥Î¶ÑÏúºÎ°ú Í≤ÄÏÉâ...") },
                        textStyle = TextStyle(color = Color.White),
                        colors = OutlinedTextFieldDefaults.colors(
                            focusedBorderColor = Color.White,
                            unfocusedBorderColor = Color.Gray,
                            cursorColor = Color.White,
                            focusedLabelColor = Color.White,
                            unfocusedLabelColor = Color.Gray,
                            focusedTextColor = Color.White,
                            unfocusedTextColor = Color.White,
                            focusedContainerColor = Color.DarkGray,
                            unfocusedContainerColor = Color.DarkGray,
                        ),
                        singleLine = true
                    )
                } else {
                    // ‚ú® Í≤ÄÏÉâ ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉú UI: Ï†úÎ™© ÌëúÏãú
                    Text("Ï±åÎ¶∞ÏßÄÎ£∏", fontSize = 24.sp, fontWeight = FontWeight.Bold, color = Color.White, modifier = Modifier.weight(1f))
                }

                Row(verticalAlignment = Alignment.CenterVertically) {

                    // üëá 'ÎÇ¥ Ï±åÎ¶∞ÏßÄÎ£∏' ÌÉ≠Ïùº ÎïåÎßå ÏÇ≠Ï†ú Î≤ÑÌäº ÌëúÏãú
                    if (!isSearchActive && selectedTabIndex == 0) {
                        IconButton(onClick = onNavigateToDelete) {
                            Icon(
                                imageVector = Icons.Default.Delete,
                                contentDescription = "Ï±åÎ¶∞ÏßÄÎ£∏ ÏÇ≠Ï†ú",
                                tint = Color.White
                            )
                        }
                    }

                    // ‚ú® Í≤ÄÏÉâ ÏïÑÏù¥ÏΩò: ÌÅ¥Î¶≠ Ïãú isSearchActive ÏÉÅÌÉúÎ•º ÌÜ†Í∏Ä. ÏïÑÏù¥ÏΩò Î™®ÏñëÎèÑ ÏÉÅÌÉúÏóê Îî∞Îùº Î≥ÄÍ≤Ω
                    IconButton(onClick = {
                        isSearchActive = !isSearchActive
                        if (!isSearchActive) {
                            searchQuery = "" // Í≤ÄÏÉâÏ∞ΩÏù¥ Îã´Ìûê Îïå Í≤ÄÏÉâÏñ¥ Ï¥àÍ∏∞Ìôî
                        }
                    }) {
                        Icon(
                            imageVector = if (isSearchActive) Icons.Default.Close else Icons.Default.Search,
                            contentDescription = if (isSearchActive) "Í≤ÄÏÉâ Îã´Í∏∞" else "Í≤ÄÏÉâ Ïó¥Í∏∞",
                            tint = Color.White
                        )
                    }

                    // ‚ú® Í≤ÄÏÉâ Ï§ëÏù¥ ÏïÑÎãê ÎïåÎßå ÏÇ≠Ï†ú, Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº ÌëúÏãú
                    if (!isSearchActive) {
                        IconButton(onClick = onNavigateBack) {
                            Icon(
                                imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                                contentDescription = "ÎèåÏïÑÍ∞ÄÍ∏∞",
                                tint = Color.White
                            )
                        }
                    }
                }
            }
            TabRow(
                selectedTabIndex = selectedTabIndex,
                containerColor = Color.Transparent,
                contentColor = Color.White
            ) {
                tabs.forEachIndexed { index, title ->
                    Tab(
                        selected = selectedTabIndex == index,
                        onClick = { selectedTabIndex = index },
                        text = { Text(text = title, style = MaterialTheme.typography.bodyLarge) }
                    )
                }
            }

            Spacer(Modifier.height(16.dp))


            if (currentUser == null) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    CircularProgressIndicator()
                    Text(
                        text = "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...",
                        modifier = Modifier.padding(top = 60.dp),
                        color = Color.LightGray
                    )
                }
            }
            else if(isLoading){
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    CircularProgressIndicator()
                    Text(
                        text = "Ï±åÎ¶∞ÏßÄÎ£∏ Î∂àÎü¨Ïò§Îäî Ï§ë...",
                        modifier = Modifier.padding(top = 60.dp),
                        color = Color.LightGray
                    )
                }
            }
            else {
                // ‚úÖ [Î≥ÄÍ≤Ω] ÏÑ†ÌÉùÎêú ÌÉ≠Ïóê Îî∞Îùº Îã§Î•∏ Ïª®ÌÖêÏ∏†Î•º Î≥¥Ïó¨Ï§å
                when (selectedTabIndex) {
                    // "ÎÇ¥Í∞Ä ÏÉùÏÑ±Ìïú Ï±åÎ¶∞ÏßÄÎ£∏" ÌÉ≠
                    0 -> {
                        // ‚ú® Í≤ÄÏÉâ Í∏∞Îä•: ÏÉùÏÑ±Ìïú Ï±åÎ¶∞ÏßÄÎ£∏ Î™©Î°ùÏùÑ Í≤ÄÏÉâÏñ¥Î°ú ÌïÑÌÑ∞ÎßÅ
                        val filteredCreatedRooms = createdRooms.filter {
                            it.name.contains(searchQuery, ignoreCase = true)
                        }

                        if (createdRooms.isEmpty()) {
                            EmptyStateMessage(
                                message = "Ï±åÎ¶∞ÏßÄÎ£∏Ïù¥ ÏóÜÏäµÎãàÎã§.\n+Î≤ÑÌäºÏùÑ ÎàåÎü¨ Ï±åÎ¶∞ÏßÄÎ£∏ÏùÑ ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî!",
                                // ‚ùó [ÏàòÏ†ï] weight(1f)Î•º Ï†ÅÏö©ÌïòÏó¨ ÎÇ®ÏùÄ Í≥µÍ∞ÑÏùÑ Î™®Îëê Ï∞®ÏßÄÌïòÎèÑÎ°ù Ìï©ÎãàÎã§.
                                modifier = Modifier.weight(1f)
                            )
                        } else if (searchQuery.isNotEmpty() && filteredCreatedRooms.isEmpty()) {
                            // ‚ú® Í≤ÄÏÉâ Í∏∞Îä•: Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏùÑ Îïå Î©îÏãúÏßÄ ÌëúÏãú
                            EmptyStateMessage(
                                message = "Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.",
                                modifier = Modifier.weight(1f)
                            )
                        }
                        else {
                            LazyColumn(
                                modifier = Modifier
                                    // ‚ùó [ÏàòÏ†ï] fillMaxSize() ÎåÄÏã† weight(1f)Î•º ÏÇ¨Ïö©Ìï¥ ÎÇ®ÏùÄ Í≥µÍ∞ÑÏùÑ Î™®Îëê Ï∞®ÏßÄÌïòÎèÑÎ°ù Ìï©ÎãàÎã§.
                                    .weight(1f)
                                    .fillMaxWidth()
                                    .padding(horizontal = 16.dp)
                            ) {
                                items(filteredCreatedRooms) { room ->
                                    StudyRoomItem(room = room, onClick = {
                                        roomVM.onJoinStudyRoom(room)
                                    })
                                }
                                item {
                                    Spacer(Modifier.height(16.dp))
                                }
                            }
                        }
                    }
                    // "ÎÇ¥Í∞Ä Ï∞∏Ïó¨Ìïú Ï±åÎ¶∞ÏßÄÎ£∏" ÌÉ≠
                    1 -> {
                        // ‚ú® Í≤ÄÏÉâ Í∏∞Îä•: Ï∞∏Ïó¨Ìïú Ï±åÎ¶∞ÏßÄÎ£∏ Î™©Î°ùÏùÑ Í≤ÄÏÉâÏñ¥Î°ú ÌïÑÌÑ∞ÎßÅ
                        val filteredJoinedRooms = joinedRooms.filter {
                            it.name.contains(searchQuery, ignoreCase = true)
                        }

                        if (joinedRooms.isEmpty()) {
                            EmptyStateMessage(
                                message = "Ï∞∏Ïó¨Ìïú Ï±åÎ¶∞ÏßÄÎ£∏Ïù¥ ÏóÜÏäµÎãàÎã§.",
                                // ‚ùó [ÏàòÏ†ï] weight(1f)Î•º Ï†ÅÏö©ÌïòÏó¨ ÎÇ®ÏùÄ Í≥µÍ∞ÑÏùÑ Î™®Îëê Ï∞®ÏßÄÌïòÎèÑÎ°ù Ìï©ÎãàÎã§.
                                modifier = Modifier.weight(1f)
                            )
                        } else if (searchQuery.isNotEmpty() && filteredJoinedRooms.isEmpty()) {
                            // ‚ú® Í≤ÄÏÉâ Í∏∞Îä•: Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏùÑ Îïå Î©îÏãúÏßÄ ÌëúÏãú
                            EmptyStateMessage(
                                message = "Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.",
                                modifier = Modifier.weight(1f)
                            )
                        }
                        else {
                            LazyColumn(
                                modifier = Modifier
                                    // ‚ùó [ÏàòÏ†ï] fillMaxSize() ÎåÄÏã† weight(1f)Î•º ÏÇ¨Ïö©Ìï¥ ÎÇ®ÏùÄ Í≥µÍ∞ÑÏùÑ Î™®Îëê Ï∞®ÏßÄÌïòÎèÑÎ°ù Ìï©ÎãàÎã§.
                                    .weight(1f)
                                    .fillMaxWidth()
                                    .padding(horizontal = 16.dp)
                            ) {
                                items(filteredJoinedRooms) { room ->
                                    StudyRoomItem(room = room, onClick = {
                                        roomVM.onJoinStudyRoom(room)
                                    })
                                }
                                item {
                                    Spacer(Modifier.height(16.dp))
                                }
                            }
                        }
                    }
                }
            }
        }

        if (currentUser != null) {
            FloatingActionButton(
                onClick = { roomVM.showCreateStudyRoomDialog(true) },
                modifier = Modifier
                    .align(Alignment.BottomEnd)
                    .padding(32.dp) // ÌôîÎ©¥ Í∞ÄÏû•ÏûêÎ¶¨Ïóê Ï†ÅÏ†àÌïú Ïó¨Î∞± Ï∂îÍ∞Ä
            ) {
                Icon(Icons.Default.Add, contentDescription = "Ï±åÎ¶∞ÏßÄÎ£∏ ÏÉùÏÑ±")
            }
        }
    }


    // Ï±åÎ¶∞ÏßÄÎ£∏ ÏÉùÏÑ± Îã§Ïù¥ÏñºÎ°úÍ∑∏
    if (uiState.showCreateStudyRoomDialog) {
        currentUser?.let { user ->
            CreateStudyRoomDialog(
                currentUser = user,
                viewModel = roomVM,
                onDismiss = { roomVM.showCreateStudyRoomDialog(false) }
            )
        }
    }

    // Ï±åÎ¶∞ÏßÄÎ£∏ Ï∞∏Ïó¨ Îã§Ïù¥ÏñºÎ°úÍ∑∏
    uiState.showJoinStudyRoomDialog?.let { room ->
        currentUser?.let { user ->
            JoinStudyRoomDialog(
                room = room,
                currentUser = user,
                collectedAnimals = collectAnimal,
                viewModel = roomVM,
                onDismiss = { roomVM.dismissJoinStudyRoomDialog() }
            )
        }
    }
}


// ‚úÖ [Ï∂îÍ∞Ä] Î£∏Ïù¥ ÎπÑÏñ¥ÏûàÏùÑ Îïå ÌëúÏãúÌï† Î©îÏãúÏßÄ Composable
@Composable
fun EmptyStateMessage(message: String, modifier: Modifier = Modifier) {
    Box(
        modifier = modifier
            // ‚ùó [ÏàòÏ†ï] Ïù¥ ComposableÏùÑ ÏÇ¨Ïö©ÌïòÎäî Í≥≥ÏóêÏÑú ÌÅ¨Í∏∞Î•º Í≤∞Ï†ïÌïòÎèÑÎ°ù fillMaxSize()Î•º Ï†úÍ±∞Ìï©ÎãàÎã§.
            .fillMaxSize()
            .padding(16.dp),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = message,
            style = MaterialTheme.typography.bodyLarge,
            color = Color.Gray,
            textAlign = TextAlign.Center
        )
    }
}